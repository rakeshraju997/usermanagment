{{#each logineduser}}{{#setVar 'userrole' this.role}}{{/setVar}}{{/each}}
<div class="card">
    <div class="card-body">
        <div class="d-flex m-2">
            <h3 class="col-3">Users</h3>
            {{#ifCond ../userrole "admin"}}
            <span class="col-9  d-flex justify-content-end">
                <a href="/admin/adduser" type="button" class="btn btn-primary btn-sm p-2 d-flex align-items-center">Add User</a>
            </span>
            {{/ifCond}}
        </div>
        {{#if alert}}
        <div class="alert alert-{{alertcolor}} alert-dismissible fade show" role="alert">
            {{alert}}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        {{/if}}

        <div class="col-2 form-group pb-3">
            <label class="pb-1 fs-7">No. of Rows:</label>
            <!--		Show Numbers Of Rows 		-->
            <select class="form-control text-basetext fs-7" name="state" id="maxRows">
                <option value="5000">Show ALL Rows</option>
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="15">15</option>
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="70">70</option>
                <option value="100">100</option>
            </select>
        </div>
        <div class="table-responsive-lg bdr">
            <table class="table rounded text-basetext" id="table-id">
            <thead class="fs-8 fw-light">
                <tr>
                    <th scope="col">NAME</th>
                    <th scope="col">ASSIGNED</th>
                    <th scope="col">ACTIONS</th>
                </tr>
            </thead>
            <tbody class="table-border-bottom-0">            
                {{#each usersRow}}
                <tr>
                    <td class="col align-left p-3">
                        <div class="d-flex flex-row align-items-center">
                            <div
                                class="profiletext text-primary bg-dark  rounded my-auto m-2 d-flex align-items-center justify-content-center">
                                <span>RR</span>
                            </div>
                            <div
                                style="display:flex;flex-direction:column;justify-content: space-around;align-items: left;">
                                <div class="d-block fs-6">{{this.first_name}}</div>
                                <div class="d-block fs-7">{{this.email}}</div>
                            </div>
                        </div>
                    </td>
                    <td class="col align-left p-3">
                        <div class="d-flex flex-row align-items-center">
                            <ul class="list-unstyled ">
                                {{#each this.template_assigned}}
                                <li class="list-group-item fs-7">
                                    <a class="d-inline" href="/admin/skillaction/{{this}}/{{../this.id}}">{{this}}</a>
                                </li>
                                {{/each}}
                            </ul>
                        </div>
                    </td>                
                    <td class="col align-left p-3">
                        <div class="d-flex align-items-center ">
                            {{#ifCond ../userrole "admin"}}
                            <a type="button" href="/admin/viewuser/{{this.id}}"
                                class="btn btn-outline-secondary border border-opacity-50 mx-2 fw-semibold">View</a>
                            <a type="button" href="/admin/updateuser/{{this.id}}"
                                class="btn btn-outline-secondary border border-opacity-50 mx-2 fw-semibold">Update</a>
                            <a type="button"
                                class="deleteuser btn btn-outline-secondary border border-opacity-50 mx-2 fw-semibold"
                                data-bs-toggle="modal" data-id="{{this.id}}"
                                data-bs-target="#deleteusermodel">Delete</a>
                                {{/ifCond}}
                            <a type="button"
                                class="assignuser btn btn-outline-secondary border border-opacity-50 mx-2 fw-semibold"
                                data-bs-toggle="modal" data-id="{{this.id}}"
                                data-bs-target="#assignskillmodel">Assign</a>

                        </div>

                    </td>
                </tr>
                {{/each}}
            </tbody>
        </table>
        </div>
        

        <!--Start Pagination -->
        <div class='pagination-container'>
            <nav>
                <ul class="pagination">
                    <li class="btn btn-secondary rounded-5 m-2" data-page="prev">
                        <span> &#8592</span>
                    </li>
                    <!--	Here the JS Function Will Add the Rows -->
                    <li class="btn btn-secondary rounded-5 m-2" data-page="next" id="prev">
                        <span> &#8594</span>
                    </li>
                </ul>
            </nav>
        </div>

        <!-- Modal User Delete-->
        <div class="modal fade" id="deleteusermodel" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
            aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="staticBackdropLabel">Remove User</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        Delete the selected user?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <a type="button" class="btn btn-primary deleteconfirm">Yes</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal Skill Assign-->
        <div class="modal fade" id="assignskillmodel" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
            aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <form action="/admin/assignskill/" class="mb-0 assignform" method="POST">
                        <div class="modal-header">
                            <h5 class="modal-title" id="staticBackdropLabel">Select Skill Set</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <select class="form-select text-basetext" name="skill">
                                {{#each skilllist}}
                                <option value="{{this.id}}">{{this.template}}</option>
                                {{/each}}
                            </select>
                            <input class="my-2" id="calandar" />
                        </div>
                        <input type="hidden" name="date">
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Yes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    function getValue() {
    var dateStr = $('#calandar').val()//.data("DateTimePicker").date();
    const [timeComponents, dateComponents] = dateStr.split(' ');
    const [day, month, year] = dateComponents.split('/');
    const [hours, minutes] = timeComponents.split(':');
    const date = new Date(+year, month - 1, +day, +hours, +minutes);
    const unixTimestamp = Math.floor(date.getTime() / 1000);
    console.log(unixTimestamp);
    $("input[name='date']").val(unixTimestamp);
    }
    $('#calandar').datetimepicker({
            uiLibrary: 'bootstrap4',
            modal: false,
            iconsLibrary: 'fontawesome',
            footer: true
    });
    $("#submitcalander").click(function(){
        getValue();
    });
    </script>
<script>
    $(document).on("click", ".deleteuser", function () {
     var userID = $(this).data('id');
     $(".deleteconfirm").attr("href", '/admin/deleteuser/'+userID );
    });
    $(document).on("click", ".assignuser", function () {
     var userID = $(this).data('id');
     $(".assignform").attr("action", '/admin/assignskill/'+userID );
    });
</script>
{{!-- pagination script --}}
<script>
    getPagination('#table-id');
    function getPagination(table) {
        var lastPage = 1;
        $('#maxRows')
            .on('change', function (evt) {
                //$('.paginationprev').html('');						// reset pagination
                lastPage = 1;
                $('.pagination')
                    .find('li')
                    .slice(1, -1)
                    .remove();
                var trnum = 0; // reset tr counter
                var maxRows = parseInt($(this).val()); // get Max Rows from select option
                if (maxRows == 5000) {
                    $('.pagination').hide();
                } else {
                    $('.pagination').show();
                }
                var totalRows = $(table + ' tbody tr').length; // numbers of rows
                $(table + ' tr:gt(0)').each(function () {
                    // each TR in  table and not the header
                    trnum++; // Start Counter
                    if (trnum > maxRows) {
                        // if tr number gt maxRows
                        $(this).hide(); // fade it out
                    }
                    if (trnum <= maxRows) {
                        $(this).show();
                    } // else fade in Important in case if it ..
                }); //  was fade out to fade it in
                if (totalRows > maxRows) {
                    // if tr total rows gt max rows option
                    var pagenum = Math.ceil(totalRows / maxRows); // ceil total(rows/maxrows) to get ..
                    //	numbers of pages
                    for (var i = 1; i <= pagenum;) {
                        // for each page append pagination li
                        $('.pagination #prev')
                            .before(
                                '<li data-page="' + i + '"> \ <span>' + i++ +
                                '<span class="sr-only"></span></span>\
								</li>'
                            )
                            .show();
                    } // end for i
                } // end if row count > max rows
                $('.pagination [data-page="1"]').addClass('active'); // add active class to the first li
                $('.pagination li').on('click', function (evt) {
                    // on click each page
                    evt.stopImmediatePropagation();
                    evt.preventDefault();
                    var pageNum = $(this).attr('data-page'); // get it's number
                    var maxRows = parseInt($('#maxRows').val()); // get Max Rows from select option
                    if (pageNum == 'prev') {
                        if (lastPage == 1) {
                            return;
                        }
                        pageNum = --lastPage;
                    }
                    if (pageNum == 'next') {
                        if (lastPage == $('.pagination li').length - 2) {
                            return;
                        }
                        pageNum = ++lastPage;
                    }
                    lastPage = pageNum;
                    var trIndex = 0; // reset tr counter
                    $('.pagination li').removeClass('active'); // remove active class from all li
                    $('.pagination [data-page="' + lastPage + '"]').addClass('active'); // add active class to the clicked
                    // $(this).addClass('active');					// add active class to the clicked
                    limitPagging();
                    $(table + ' tr:gt(0)').each(function () {
                        // each tr in table not the header
                        trIndex++; // tr index counter
                        // if tr index gt maxRows*pageNum or lt maxRows*pageNum-maxRows fade if out
                        if (
                            trIndex > maxRows * pageNum ||
                            trIndex <= maxRows * pageNum - maxRows
                        ) {
                            $(this).hide();
                        } else {
                            $(this).show();
                        } //else fade in
                    }); // end of for each tr in table
                }); // end of on click pagination list
                limitPagging();
            })
            .val(5)
            .change();
        // end of on select change
        // END OF PAGINATION
    }
    function limitPagging() {
        // alert($('.pagination li').length)
        if ($('.pagination li').length > 7) {
            if ($('.pagination li.active').attr('data-page') <= 3) {
                $('.pagination li:gt(5)').hide();
                $('.pagination li:lt(5)').show();
                $('.pagination [data-page="next"]').show();
            } if ($('.pagination li.active').attr('data-page') > 3) {
                $('.pagination li:gt(0)').hide();
                $('.pagination [data-page="next"]').show();
                for (let i = (parseInt($('.pagination li.active').attr('data-page')) - 2); i <= (parseInt($('.pagination li.active').attr('data-page')) + 2); i++) {
                    $('.pagination [data-page="' + i + '"]').show();
                }
            }
        }
    }
</script>